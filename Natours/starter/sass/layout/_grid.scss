.row {
    max-width: $grid-width;
    background-color: #eee;
    //center block elements inside block element
    margin: 0 auto;
    
    // same as .row:not(:last-child). Does not include the last row for specifying `margin-bottom`.
    &:not(:last-child) {
        margin-bottom: $gutter-vertical;
    }

    @include clearfix;

    // select all class attributes that starts with `col-`
    [class^="col-"] {
        float: left;
        // apply margin-right to column except for the last child.
        &:not(:last-child) {
            margin-right: $gutter-horizontal;
        }
        background-color: orangered;
    }

    .col-1-of-2 {
        width: calc((100% - #{$gutter-horizontal}) / 2);
    }

    .col-1-of-3 {
        // subtract by two gutters and multiply by gutter-horizontal. Then divide by 3 because we have now 3 columns
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }

    .col-2-of-3 {
        // subtract by two gutters and multiply by gutter-horizontal. Then divide by 3 because we have now 3 columns
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    }

    .col-1-of-4 {
        // subtract by three gutters and multiply by gutter-horizontal. Then divide by 3 because we have now 3 columns
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }

    .col-2-of-4 {
        width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }

    .col-3-of-4 {
        width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    }


}

